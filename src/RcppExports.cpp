// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// normalize
NumericVector normalize(NumericVector x);
RcppExport SEXP _SpatialEpi_normalize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize(x));
    return rcpp_result_gen;
END_RCPP
}
// NumericVectorEquality
int NumericVectorEquality(NumericVector x, NumericVector y);
RcppExport SEXP _SpatialEpi_NumericVectorEquality(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(NumericVectorEquality(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ldnbinom
double ldnbinom(double y, double E, double a, double b);
RcppExport SEXP _SpatialEpi_ldnbinom(SEXP ySEXP, SEXP ESEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ldnbinom(y, E, a, b));
    return rcpp_result_gen;
END_RCPP
}
// ldmultinom
double ldmultinom(NumericVector x, NumericVector prob);
RcppExport SEXP _SpatialEpi_ldmultinom(SEXP xSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(ldmultinom(x, prob));
    return rcpp_result_gen;
END_RCPP
}
// coeff
NumericVector coeff(NumericVector y_vector, NumericVector E_vector, NumericVector a_values, NumericVector b_values, List cluster_list);
RcppExport SEXP _SpatialEpi_coeff(SEXP y_vectorSEXP, SEXP E_vectorSEXP, SEXP a_valuesSEXP, SEXP b_valuesSEXP, SEXP cluster_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type E_vector(E_vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_values(a_valuesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b_values(b_valuesSEXP);
    Rcpp::traits::input_parameter< List >::type cluster_list(cluster_listSEXP);
    rcpp_result_gen = Rcpp::wrap(coeff(y_vector, E_vector, a_values, b_values, cluster_list));
    return rcpp_result_gen;
END_RCPP
}
// ProbSampleReplace
int ProbSampleReplace(NumericVector prob);
RcppExport SEXP _SpatialEpi_ProbSampleReplace(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(ProbSampleReplace(prob));
    return rcpp_result_gen;
END_RCPP
}
// check_overlap
NumericVector check_overlap(NumericMatrix config, List overlap);
RcppExport SEXP _SpatialEpi_check_overlap(SEXP configSEXP, SEXP overlapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type config(configSEXP);
    Rcpp::traits::input_parameter< List >::type overlap(overlapSEXP);
    rcpp_result_gen = Rcpp::wrap(check_overlap(config, overlap));
    return rcpp_result_gen;
END_RCPP
}
// clean_moves_matrix
NumericMatrix clean_moves_matrix(NumericVector theta, NumericMatrix moves, int n_zones);
RcppExport SEXP _SpatialEpi_clean_moves_matrix(SEXP thetaSEXP, SEXP movesSEXP, SEXP n_zonesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type moves(movesSEXP);
    Rcpp::traits::input_parameter< int >::type n_zones(n_zonesSEXP);
    rcpp_result_gen = Rcpp::wrap(clean_moves_matrix(theta, moves, n_zones));
    return rcpp_result_gen;
END_RCPP
}
// return_death_moves
NumericMatrix return_death_moves(NumericVector theta);
RcppExport SEXP _SpatialEpi_return_death_moves(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(return_death_moves(theta));
    return rcpp_result_gen;
END_RCPP
}
// return_birth_moves
NumericMatrix return_birth_moves(NumericVector theta, List overlap);
RcppExport SEXP _SpatialEpi_return_birth_moves(SEXP thetaSEXP, SEXP overlapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type overlap(overlapSEXP);
    rcpp_result_gen = Rcpp::wrap(return_birth_moves(theta, overlap));
    return rcpp_result_gen;
END_RCPP
}
// return_local_moves
List return_local_moves(NumericVector theta, List overlap, NumericMatrix cluster_coords);
RcppExport SEXP _SpatialEpi_return_local_moves(SEXP thetaSEXP, SEXP overlapSEXP, SEXP cluster_coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type overlap(overlapSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cluster_coords(cluster_coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(return_local_moves(theta, overlap, cluster_coords));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_simulation
List MCMC_simulation(int n_sim, NumericVector pattern, NumericVector theta_init, List overlap, NumericMatrix cluster_coords, NumericVector p_moves_orig, int J, NumericVector lkhd_z, NumericVector lambda);
RcppExport SEXP _SpatialEpi_MCMC_simulation(SEXP n_simSEXP, SEXP patternSEXP, SEXP theta_initSEXP, SEXP overlapSEXP, SEXP cluster_coordsSEXP, SEXP p_moves_origSEXP, SEXP JSEXP, SEXP lkhd_zSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_sim(n_simSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< List >::type overlap(overlapSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cluster_coords(cluster_coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p_moves_orig(p_moves_origSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lkhd_z(lkhd_zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_simulation(n_sim, pattern, theta_init, overlap, cluster_coords, p_moves_orig, J, lkhd_z, lambda));
    return rcpp_result_gen;
END_RCPP
}
// binomialLogLkhd
double binomialLogLkhd(double cz, double nz, double N, double C);
RcppExport SEXP _SpatialEpi_binomialLogLkhd(SEXP czSEXP, SEXP nzSEXP, SEXP NSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cz(czSEXP);
    Rcpp::traits::input_parameter< double >::type nz(nzSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialLogLkhd(cz, nz, N, C));
    return rcpp_result_gen;
END_RCPP
}
// poissonLogLkhd
double poissonLogLkhd(double cz, double nz, double N, double C);
RcppExport SEXP _SpatialEpi_poissonLogLkhd(SEXP czSEXP, SEXP nzSEXP, SEXP NSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cz(czSEXP);
    Rcpp::traits::input_parameter< double >::type nz(nzSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonLogLkhd(cz, nz, N, C));
    return rcpp_result_gen;
END_RCPP
}
// computeAllLogLkhd
NumericVector computeAllLogLkhd(NumericVector observedCases, NumericVector expectedCases, List nearestNeighborsList, int nZones, String logLkhdType);
RcppExport SEXP _SpatialEpi_computeAllLogLkhd(SEXP observedCasesSEXP, SEXP expectedCasesSEXP, SEXP nearestNeighborsListSEXP, SEXP nZonesSEXP, SEXP logLkhdTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type observedCases(observedCasesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectedCases(expectedCasesSEXP);
    Rcpp::traits::input_parameter< List >::type nearestNeighborsList(nearestNeighborsListSEXP);
    Rcpp::traits::input_parameter< int >::type nZones(nZonesSEXP);
    Rcpp::traits::input_parameter< String >::type logLkhdType(logLkhdTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAllLogLkhd(observedCases, expectedCases, nearestNeighborsList, nZones, logLkhdType));
    return rcpp_result_gen;
END_RCPP
}
// kulldorffMC
NumericVector kulldorffMC(NumericMatrix permutedCaseMatrix, NumericVector expectedCases, List nearestNeighbors, int nZones, String logLkhdType);
RcppExport SEXP _SpatialEpi_kulldorffMC(SEXP permutedCaseMatrixSEXP, SEXP expectedCasesSEXP, SEXP nearestNeighborsSEXP, SEXP nZonesSEXP, SEXP logLkhdTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type permutedCaseMatrix(permutedCaseMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectedCases(expectedCasesSEXP);
    Rcpp::traits::input_parameter< List >::type nearestNeighbors(nearestNeighborsSEXP);
    Rcpp::traits::input_parameter< int >::type nZones(nZonesSEXP);
    Rcpp::traits::input_parameter< String >::type logLkhdType(logLkhdTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(kulldorffMC(permutedCaseMatrix, expectedCases, nearestNeighbors, nZones, logLkhdType));
    return rcpp_result_gen;
END_RCPP
}
// besag_newell_internal
List besag_newell_internal(NumericVector observedCases, NumericVector expectedCases, List nearestNeighborsList, int nZones, int k);
RcppExport SEXP _SpatialEpi_besag_newell_internal(SEXP observedCasesSEXP, SEXP expectedCasesSEXP, SEXP nearestNeighborsListSEXP, SEXP nZonesSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type observedCases(observedCasesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectedCases(expectedCasesSEXP);
    Rcpp::traits::input_parameter< List >::type nearestNeighborsList(nearestNeighborsListSEXP);
    Rcpp::traits::input_parameter< int >::type nZones(nZonesSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(besag_newell_internal(observedCases, expectedCases, nearestNeighborsList, nZones, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SpatialEpi_normalize", (DL_FUNC) &_SpatialEpi_normalize, 1},
    {"_SpatialEpi_NumericVectorEquality", (DL_FUNC) &_SpatialEpi_NumericVectorEquality, 2},
    {"_SpatialEpi_ldnbinom", (DL_FUNC) &_SpatialEpi_ldnbinom, 4},
    {"_SpatialEpi_ldmultinom", (DL_FUNC) &_SpatialEpi_ldmultinom, 2},
    {"_SpatialEpi_coeff", (DL_FUNC) &_SpatialEpi_coeff, 5},
    {"_SpatialEpi_ProbSampleReplace", (DL_FUNC) &_SpatialEpi_ProbSampleReplace, 1},
    {"_SpatialEpi_check_overlap", (DL_FUNC) &_SpatialEpi_check_overlap, 2},
    {"_SpatialEpi_clean_moves_matrix", (DL_FUNC) &_SpatialEpi_clean_moves_matrix, 3},
    {"_SpatialEpi_return_death_moves", (DL_FUNC) &_SpatialEpi_return_death_moves, 1},
    {"_SpatialEpi_return_birth_moves", (DL_FUNC) &_SpatialEpi_return_birth_moves, 2},
    {"_SpatialEpi_return_local_moves", (DL_FUNC) &_SpatialEpi_return_local_moves, 3},
    {"_SpatialEpi_MCMC_simulation", (DL_FUNC) &_SpatialEpi_MCMC_simulation, 9},
    {"_SpatialEpi_binomialLogLkhd", (DL_FUNC) &_SpatialEpi_binomialLogLkhd, 4},
    {"_SpatialEpi_poissonLogLkhd", (DL_FUNC) &_SpatialEpi_poissonLogLkhd, 4},
    {"_SpatialEpi_computeAllLogLkhd", (DL_FUNC) &_SpatialEpi_computeAllLogLkhd, 5},
    {"_SpatialEpi_kulldorffMC", (DL_FUNC) &_SpatialEpi_kulldorffMC, 5},
    {"_SpatialEpi_besag_newell_internal", (DL_FUNC) &_SpatialEpi_besag_newell_internal, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpatialEpi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
